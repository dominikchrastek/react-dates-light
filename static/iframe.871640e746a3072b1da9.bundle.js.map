{"version":3,"file":"static/iframe.871640e746a3072b1da9.bundle.js","sources":["webpack:///./example/Example.jsx"],"sourcesContent":["/* @flow */\nimport * as React from \"react\";\nimport * as R from \"ramda\";\nimport styled from \"styled-components\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport format from \"date-fns/format\";\nimport addDays from \"date-fns/addDays\";\nimport startOfDay from \"date-fns/startOfDay\";\nimport addMonths from \"date-fns/addMonths\";\nimport type { WeekDay } from \"../src\";\nimport Calendar from \"../src\";\n// import CalendarDay from '../src/CustomDay';\n\nconst Container = styled.div`\n  & .class1 > button {\n    background-color: #8bc34a;\n  }\n  & .class2 > button {\n    text-decoration: line-through;\n  }\n`;\n\nconst Column = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 300px;\n`;\n\ntype Props = {|\n  allowedDates?: boolean,\n  showMonthName?: boolean,\n  showWeekDayNames?: boolean,\n  firstWeekDay?: WeekDay,\n  rangeSelect?: boolean,\n  visibleMonths?: number\n|};\n\ntype State = {|\n  selectedDates: Date[],\n  disabledDates: Date[]\n|};\n\nexport default class Example extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    allowedDates: false,\n    showMonthName: true,\n    showWeekDayNames: true,\n    firstWeekDay: 0,\n    rangeSelect: false,\n    visibleMonths: 1\n  };\n\n  state = {\n    selectedDates: [],\n    disabledDates: [startOfDay(addDays(new Date(), 1))]\n  };\n\n  handleSelectDates = (selectedDates: Date[]) => {\n    this.setState({ selectedDates });\n  };\n\n  handleSetToday = () => {\n    this.setState({ selectedDates: [new Date()] });\n  };\n\n  handleSetLastMonth = () => {\n    this.setState({\n      selectedDates: eachDayOfInterval({\n        start: startOfMonth(subMonths(new Date(), 1)),\n        end: endOfMonth(subMonths(new Date(), 1))\n      })\n    });\n  };\n\n  render() {\n    const {\n      allowedDates,\n      showWeekDayNames,\n      showMonthName,\n      firstWeekDay,\n      rangeSelect,\n      visibleMonths\n    } = this.props;\n    const { selectedDates, disabledDates } = this.state;\n    return (\n      <Container>\n        <button type=\"button\" onClick={this.handleSetToday}>\n          select today\n        </button>\n        <button type=\"button\" onClick={this.handleSetLastMonth}>\n          select last month\n        </button>\n        <Calendar\n          className=\"wrapper\"\n          colors={{\n            selected: \"#008000\",\n            selectedHover: \"#329B24\",\n            borders: \"#e4e7e7\",\n            hover: \"#e4e7e7\"\n          }}\n          visibleMonths={visibleMonths}\n          selectedDates={selectedDates}\n          disabledDates={disabledDates}\n          allowedDates={\n            allowedDates ? [startOfDay(addDays(new Date(), 2))] : []\n          }\n          selectDates={this.handleSelectDates}\n          // CustomTd={CalendarDay}\n          rangeSelect={rangeSelect}\n          showWeekDayNames={showWeekDayNames}\n          showMonthName={showMonthName}\n          firstMonth={subMonths(new Date(), 1)}\n          lastMonth={addMonths(new Date(), 1)}\n          customClasses={{\n            class1: [new Date()],\n            class2: [new Date(), addDays(new Date(), 2)]\n          }}\n          firstWeekDay={Number(firstWeekDay)}\n        />\n\n        <Column>\n          <div>\n            selected dates:\n            {R.map(\n              day => (\n                <div key={day.toISOString()}>{format(day, \"dd.MM.yyyy\")}</div>\n              ),\n              selectedDates\n            )}\n          </div>\n          <div>\n            disabled dates:\n            {R.map(\n              day => (\n                <div key={day.toISOString()}>{format(day, \"dd.MM.yyyy\")}</div>\n              ),\n              disabledDates\n            )}\n          </div>\n        </Column>\n      </Container>\n    );\n  }\n}\n"],"mappings":"AAgBA","sourceRoot":""}